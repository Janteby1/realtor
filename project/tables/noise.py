'''
list of zip codes, every zip code occurance represents one noise complaint int hat area (we dont care about the exact adress, the date, the reason, the type, ect)
Once we have this list we can just correspond it to the dict of zip codes to neighborhoods created
Every zip code match we just add one to the value of that neighborhood, then give each a scrore 

4600 + (not sure about time frame)
'''

# these are dictionaries with key = neighborhood and value = zip code
bronx_dict = {'Co-op City/Eastchester': '10475', 'Throgs Neck/Country Club': '10465', 'Morris Heights': '10453', 'The Hub/Longwood': '10455', 'Belmont/Fordham/Bedford Park': '10458', 'Highbridge': '10452', 'Williamsbridge/Baychester': '10469', 'Morrisania': '10456', 'Soundview': '10472', 'Norwood/Williamsbridge': '10467', 'Jackson Heights-Rikers Island (Bronx only)': '11370', 'University Heights': '10468', 'Clasons Point': '10473', 'City Island': '10464', 'Longwood/Morrisania': '10459', 'Parkchester/Van Nest': '10462', 'Kingsbridge (Bronx only)': '10463', 'Hunts Point': '10474', 'West Farms/Crotona': '10460', 'Wakefield': '10466', 'Tremont/East Tremont': '10457', 'Melrose': '10451', 'Mott Haven/Port Morris': '10454', 'Woodlawn/Wakefield': '10470', 'Westchester/Morris Park': '10461', 'Riverdale/Fieldston': '10471'}
brooklyn_dict = {'Cypress Hills': '11208', 'Bedford-Stuyvesant': '11216', 'Brownsville': '11212', 'Brower Park/Crown Heights': '11213', 'Bushwick/Bedford-Stuyvesant': '11221', 'Midwood': '11230', 'Canarsie': '11236', 'Prospect Heights': '11238', 'Starrett City': '11239', 'Industry City/Sunset Park': '11232', 'Brooklyn Heights/Cobble Hill': '11201', 'Borough Park': '11219', 'Sheepshead Bay/Brighton Beach': '11235', 'Dyker Heights': '11228', 'Williamsburg/Bedford-Stuyvesant': '11206', 'Flatbush': '11226', 'Carroll Gardens/Red Hook': '11231', 'Greenpoint': '11222', 'Flatlands/Mill Basin': '11234', 'Stuyvesant Heights': '11233', 'Parkville/Bensonhurst': '11204', 'East Flatbush': '11203', 'Vanderveer': '11210', 'Coney Island': '11224', 'Park Slope/Gowanus': '11217', 'Gravesend/Homecrest': '11223', 'Bay Ridge': '11209', 'Williamsburg': '11211', 'Sunset Park': '11220', 'Kensington/Windsor Terrace': '11218', 'Park Slope/Windsor Terrace': '11215', 'Bath Beach/Bensonhurst': '11214', 'Crown Heights': '11225', 'East New York': '11207', 'Homecrest/Madison': '11229', 'Bushwick': '11237', 'Fort Greene': '11205'}
manhattan_dict = {'East Harlem, Middle': '10035', 'Village/Noho/Soho': '10012', 'South St. Seaport/Chinatown': '10038', 'Midtown/Clinton': '10019', 'Trinity': '10006', 'Cathedral': '10025', 'East Harlem, North': '10037', 'Hamilton Heights': '10031', 'Sutton Place/Beekman Place': '10022', 'Roosevelt Island': '10044', 'Tribeca/Chinatown': '10013', 'Lenox Hill': '10021', 'Kingsbridge (Manhattan only)': '10463', 'Grand Central/United Nations': '10017', 'Garment District': '10018', 'Chelsea': '10011', 'Chinatown/Lower East Side': '10002', 'Yorkville': '10128', 'South Washington Heights': '10032', 'Rockefeller Center': '10020', 'Murray Hill': '10016', 'Battery/Governors Island': '10004', 'Fur-Flower District': '10001', 'Upper West Side': '10024', 'Cooper Square/Union Square': '10003', 'Greenwich Village': '10014', 'Central Harlem, South': '10026', 'East Harlem, South': '10029', 'Central Harlem, Middle': '10030', 'East Village/Stuyvesant Town': '10009', 'City Hall': '10007', 'Wall Street': '10005', 'North Washington Heights': '10040', 'Battery Park City': '10280', 'Lincoln Center/Ansonia': '10023', 'Theatre District/Clinton': '10036', 'Manhattanville': '10027', 'Washington Heights': '10033', 'Inwood': '10034', 'Madison Square/Cooper Village': '10010', 'Central Harlem, North': '10039'}
queens_dict = {'College Point': '11356', 'Rosedale': '11422', 'Middle Village': '11379', 'South Ozone Park': '11436', 'Rochdale/Baisley Park': '11434', 'Jackson Heights-Rikers Island(Queens only)': '11370', 'Rockaway Point/Roxbury': '11697', 'New Hyde Park': '11040', 'Rego Park': '11374', 'Auburndale': '11358', 'Oakland Gardens/Bayside Hill': '11364', 'Steinway': '11105', 'Whitestone': '11357', 'Kew Gardens': '11415', 'Corona': '11368', 'Ozone Park': '11417', 'Forest Hills': '11375', 'Astoria': '11103', 'Fort Tilden': '11695', 'Glen Oaks': '11004', 'Flushing/Murray Hill': '11355', 'East Elmhurst': '11369', 'Cambria Heights': '11411', 'Elmhurst': '11373', 'Arverne': '11692', 'Little Neck': '11362', 'Queens Village/Creedmoor': '11427', 'Queens Village (South)': '11429', 'Maspeth': '11378', 'North Shore Towers': '11005', 'Ravenswood': '11106', 'Bellerose': '11426', 'Floral Park': '11001', 'Bay Terrace': '11360', 'Hammels/Broad Channel': '11693', 'Kew Garden Hills': '11367', 'Queens Village': '11428', 'Utopia/Fresh Meadows': '11366', 'Douglaston': '11363', 'Fresh Meadows': '11365', 'Hollis/Holliswood': '11423', 'Jackson Heights': '11372', 'Sunnyside': '11104', 'Woodhaven': '11421', 'St. Albans': '11412', 'Bayside': '11361', 'Ozone Park/Woodhaven': '11416', 'Long Island City/Hunters Point': '11101', 'Jamaica Hills/South Jamaica': '11435', 'Old Astoria': '11102', 'South Jamaica': '11433', 'Springfield Gardens/Laurelton': '11413', 'Howard Beach': '11414', 'Far Rockaway': '11691', 'Woodside': '11377', 'Richmond Hill': '11418', 'Jamaica/Hillcrest': '11432', 'Seaside/Belle Harbour/Neponsit': '11694', 'JFK Airport': '11430', 'Ridgewood/Glendale': '11385', 'Flushing': '11354', 'South Richmond Hill': '11419'}
staten_island_dict = {'Port Richmond': '10302', 'Castleton Corners/New Springvill': '10314', 'Great Kills': '10308', 'Stapleton/Fox Hills': '10304', 'Princes Bay/Woodrow': '10309', 'New Brighton/Grymes Hill': '10301', 'Tottenville': '10307', 'Mariners Harbour/Point Ivory': '10303', 'Rosebank': '10305', 'New Dorp/Richmondtown': '10306', 'Eltingville/Annadale': '10312', 'West New Brighton': '10310'}

# this is only a test array of 750 zip codes
zip_codes = ["10128","11236","10038","11235","11219","11362","10003","11375","11211","11233","11206","11375","10022","11234","10065","10012","11201","11218","10023","10017","10017","10016","10021","10017","10038","10013","10011","10003","10028","10002","10024","10026","10001","10011","10005","10011","10018","11104","11375","11231","11375","10006","10065","10005","11411","10011","11211","11216","10017","11209","10009","10010","10034","10003","11217","11356","11249","10005","10017","10014","10065","10011","10065","10003","11355","10004","10009","10023","11106","11103","11215","11361","11433","11221","11358","11377","10016","11356","11418","10471","11372","11101","10065","10025","10128","10011","10022","10028","10016","11249","10019","10065","10065","10026","10065","10026","11104","10016","10065","10019","10025","10065","10004","10003","10019","10019","10005","10016","10011","10013","11372","10038","10019","10471","10019","10013","11215","11215","10012","10036","11215","10019","11215","11201","11211","11222","11216","11211","11211","11211","11216","11211","11249","11237","11211","11211","11237","10016","10016","10128","11372","11102","10011","10017","10038","10019","11385","10019","10005","11201","10011","11212","10011","11201","11201","10065","11235","11375","10463","10021","10038","10017","11419","11217","10010","11215","11375","10003","10017","10017","10016","11368","10013","10012","10012","10013","10013","10004","10002","11106","10038","11237","10014","10019","11207","11201","10011","10013","10011","10011","10016","10016","10016","10305","10011","11201","11205","10011","11215","10025","10026","11354","10028","11101","10025","11372","11201","10003","10016","10023","10016","10003","11211","11209","11211","10010","11201","11101","10038","10038","11201","11374","10012","10038","11106","11201","10463","11416","11215","11214","11218","10012","10019","11375","10018","11249","10005","10007","10280","11361","10003","11235","10013","11103","10019","10003","11375","11101","11215","11372","11355","11360","10010","11372","11432","11367","10007","11214","11226","10023","11361","10023","11206","10309","11234","10023","10005","11230","11216","10036","10036","11226","10038","11201","11211","10301","11204","10003","11223","10011","11216","10001","11216","11237","11215","11238","10303","11231","11374","11215","11231","10010","10312","10302","10019","10010","11215","11238","10036","11372","11225","11215","11238","11216","10017","11221","10038","11233","10022","11201","10004","10003","10025","11212","11233","10016","10036","10128","11201","10030","10011","11222","10007","11231","10019","10023","10012","10012","10001","11104","10471","11375","11237","11225","11207","11102","10012","10016","11375","11221","11370","11105","10012","10036","10012","10012","11234","10024","10001","11377","10003","10470","10004","11213","11235","11211","10280","10280","11214","10036","10464","10013","10011","11102","10019","10016","10024","10075","10305","10019","10025","10016","11220","10018","11204","11354","10016","11218","11223","10002","11214","10065","10012","11220","10010","11379","10019","10019","11219","11210","11208","11236","11226","11203","11204","11218","10036","10025","10016","11217","10016","10038","10022","10016","10016","10016","10016","10065","10023","10016","10065","10016","10065","10019","10016","10016","10016","10016","11237","10065","10006","10016","10016","10016","10065","10128","10016","10016","10016","10065","10065","10016","10016","10016","10065","10016","10016","10017","10016","10016","10016","10016","10065","10019","10016","10065","11209","11232","11201","11201","10003","11237","11215","10019","10003","11229","11377","11218","10065","11230","11428","11204","10075","10309","10017","11204","10012","11249","11249","10010","10012","10023","11237","10013","10013","10012","11372","11211","11373","11231","11220","11237","11237","10040","11237","10009","11249","11249","11220","10009","11231","11237","10009","10009","10009","10009","10009","10024","10018","11354","10075","10310","10013","10024","11207","11225","11237","11230","10472","10001","10028","11207","11222","10471","11229","11232","11204","11216","11238","11231","11412","10003","10301","11203","11211","11201","11238","11238","11209","11215","11223","11201","11229","11205","11212","11232","11225","11219","11201","11207","11221","11223","11214","11215","10305","11231","11225","11223","10301","11225","11217","11232","11217","11230","11230","11412","11201","11201","11238","11218","11249","11223","10022","11225","11214","10013","11213","10128","11238","10128","10128","10128","11217","10128","10128","10034","10037","10032","11374","10312","11231","11249","11234","11224","11217","11225","11206","11356","11374","10014","11374","11218","11215","11234","11211","11209","11220","11220","10310","11225","10002","11214","10025","11228","10301","11235","10075","11229","11235","11229","11224","10010","10128","11217","11229","11222","10305","10461","11238","11369","11233","10303","11209","11215","11106","11226","11239","11692","11378","11360","10001","11233","11229","10030","11208","11367","11223","11361","11231","11236","10308","11249","11209","11205","11221","11221","11211","11249","10308","10470","11210","11249","10036","10036","11234","11103","10017","10010","11238","11238","10006","10006","10006","10011","11104","10010","11211","11211","11201","11214","11238","11208","11201","10038","10019","10010","10012","11368","11201","11238","10307","10280","11215","11211","11364","11226","10017","10014","10036","11207","10026","11213","11238","11222","11214","10031","10314","11207","11232","10017","10012","11211","11214","10280","11230","11201","10303","11228","11249","11205","11231","11206","10010","11231","10065","10029","11206","11372","11201","11233","11222","11201","11201","11216","11370","10014","10014","10002","10019","11207","11103","11211","11223"]


# basically go through the list of 750 zip codes, check each one to see if it is in the bronx dict, if it is then print out the name of the neighborhood
# worried this might be too expensive and take too long, but we only will need to run it once to seed the db

count = 0
errors = 0
for i in zip_codes:
	try :
		# if the zip code is in of the dicts / lists
		if i in list(bronx_dict.values()): 
			# then print the value of the key the value is assigned to
			print (list(brooklyn_dict.keys())[list(brooklyn_dict.values()).index(i)])
			print(count)
		elif i in list(brooklyn_dict.values()):
			print (list(brooklyn_dict.keys())[list(brooklyn_dict.values()).index(i)])
			print(count)
		elif i in list(manhattan_dict.values()):
			print (list(manhattan_dict.keys())[list(manhattan_dict.values()).index(i)])
			print(count)
		elif i in list(queens_dict.values()):
			print (list(queens_dict.keys())[list(queens_dict.values()).index(i)])
			print(count)
		elif i in list(staten_island_dict.values()):
			print (list(staten_island_dict.keys())[list(staten_island_dict.values()).index(i)])
			print(count)
		else:
			print ("** NOT HERE **")
			errors += 1
	except:
		print ("** ERROR **")
		errors += 1

	count +=1

print ("errors: ", errors)



# # this will search the dictionary by the value and return the key
# print(list(bronx_dict.keys())[list(bronx_dict.values()).index("10475")]) # Prints key of 10475



